<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<style>
    body {
        background-color: #f0f0f0;

    }

    * {
        font-family: Arial, sans-serif;
        margin: 0;
        box-sizing: border-box;
        padding: 0;
    }

    span.loader-parent {
        background: black;
        display: inline-block;
        height: 100%;
        padding-block: 5rem;
        width: 100%;
        position: relative;
        /* text-align: center; */
        display: flex;
        justify-content: center;
    }

    main {
        max-width: 800px;
        margin: 30px auto;
        padding: 20px;
        background-color: #fff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    h2 {
        margin-top: 0;
        color: #333;
        text-transform: uppercase;
        margin-bottom: 10px;
    }

    form {
        display: flex;
        margin-bottom: 20px;
        gap: 20px;
    }

    input[type="text"] {
        flex: 1;
        padding: 10px;
        border: 2px solid #242222;
        border-radius: 3px;
    }

    input[type="submit"] {
        background-color: #007bff;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    input[type="submit"]:hover {
        background-color: #0056b3;
    }

    input:focus {
        border: 2px solid #007bff;
        outline: none;
    }

    #dataContainer {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        grid-gap: 20px;
    }


    .each-content {
        background-color: #ffffff;
        border-radius: 5px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
    }

    .submit-date {
        color: #888888;
        font-size: 14px;

    }

    .task-title {
        color: #333333;
        font-size: 20px;
        margin-block: .55rem;

    }

    .task-descriptio {
        color: #666666;
        font-size: 16px;
        margin-bottom: 20px;
    }

    button {
        background-color: #007bff;
        border: none;
        color: #ffffff;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 5px;
    }

    button:hover {
        background-color: #0056b3;
    }



    .loader,
    .loader:before,
    .loader:after {
        width: 35px;
        aspect-ratio: 1;
        box-shadow: 0 0 0 3px inset #fff;
        position: relative;
        animation: 1.5s infinite 0.5s;
        animation-name: l7-1, l7-2;
    }

    .loader:before,
    .loader:after {
        content: "";
        position: absolute;
        left: calc(100% + 5px);
        animation-delay: 1s, 0s;
    }

    .loader:after {
        left: -40px;
        animation-delay: 0s, 1s;
    }

    @keyframes l7-1 {

        0%,
        55%,
        100% {
            border-top-left-radius: 0;
            border-bottom-right-radius: 0
        }

        20%,
        30% {
            border-top-left-radius: 50%;
            border-bottom-right-radius: 50%
        }
    }

    @keyframes l7-2 {

        0%,
        55%,
        100% {
            border-bottom-left-radius: 0;
            border-top-right-radius: 0
        }

        20%,
        30% {
            border-bottom-left-radius: 50%;
            border-top-right-radius: 50%
        }

    }

    .holder {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    #todos-count {
        font-size: 18px;
        color: #007bff;
        text-decoration: underline;
    }

    .task-descriptio {
        word-wrap: break-word;
    }

    center {
        text-transform: uppercase;
        margin-bottom: 25px;
    }

    center b {
        color: #007bff;
    }

    @media screen and (max-width: 650px) {

        form {
            flex-direction: column;
            gap: 10px;
        }

        span.loader-parent {
            padding-block: 3rem;
        }
    }
</style>

<body>
    <main>
        <center>
            <h1>task <b>app</b></h1>
        </center>
        <div class="holder">
            <h2>crud-app</h2>
            <h4 id="todos-count"></h4>
        </div>

        <form id="myForm">
            <input type="text" id="name" name="taskTitle" placeholder="Task Title">
            <input type="text" id="description" name="taskDescription" placeholder="Task Description">
            <button type="submit">Submit</button>
        </form>


        <div>
            <span class="loader-parent">
                <div class="loader"></div>
            </span>
            <div id="dataContainer">
            </div>

        </div>
        <h5 id="sorry"></h5>

    </main>


    <script>
        let todos_count = document.getElementById("todos-count");
        let loader = document.querySelector('.loader-parent');
        let sorry = document.getElementById('sorry');

        document.getElementById("myForm").addEventListener("submit", async function (event) {
            event.preventDefault();

            const name = document.getElementById("name").value;
            const description = document.getElementById("description").value;

            if (name.trim() === "" || description.trim() === "") {
                alert("Please enter both title and description before submitting the form.");
                return;
            }

            const taskData = {
                taskTitle: name,
                taskDescription: description
            };

            const token = document.cookie.replace(/(?:(?:^|.*;\s*)token\s*=\s*([^;]*).*$)|^.*$/, "$1");

            try {
                const response = await fetch("http://localhost:3000/api/todos/", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${token}`
                    },
                    body: JSON.stringify(taskData)
                });

                if (!response.ok) {
                    throw new Error("Failed to submit tasküòî");
                }
            } catch (error) {
                // console.error("Error:", error.message);
            } finally {
                document.getElementById("name").value = "";
                document.getElementById("description").value = "";
                fetchData();
            }
        });

        function fetchData() {
            const token = document.cookie.replace(/(?:(?:^|.*;\s*)token\s*=\s*([^;]*).*$)|^.*$/, "$1");

            fetch('http://localhost:3000/api/todos/userTodos', {
                headers: {
                    "Authorization": `Bearer ${token}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        if (response.status === 401) {
                            window.location.href = "/login";
                        } else {
                            // console.log(response.statusText);
                        }
                    }
                    return response.json();
                })
                .then(data => {
                    // console.log(data)
                    if (data.message === "No todos found for the user") {
                        sorry.textContent = "Sorry,you do not have any todos in databaseüò¢";
                        loader.style.display = "none";
                        return;
                    }

                    sorry.style.display = 'none';
                    todos_count.innerHTML = ` ${data.length} Task(s)`;

                    const htmlContent = generateHTML(data);
                    document.getElementById('dataContainer').innerHTML = htmlContent;
                })
                .catch(error => {
                    // console.error('There was a problem with the fetch operation:', error);
                    sorry.textContent = "Sorry, there was an error fetching todosüò¢";
                })
                .finally(() => {
                    loader.style.display = "none";
                });
        }


        function generateHTML(data) {
            let html = '<div class="container">';
            data.forEach(item => {
                html += `
                    <div class="each-content">
                        <i class='submit-date'><b>TaskDate:</b> ${item.taskSubmitedDate}</i>
                        <h3 class='task-title'>TaskTitle: ${item.taskTitle} </h3>
                        <p class='task-descriptio'>TaskDescription: ${item.taskDescription} </p>
                        <button onclick="deleteSubscriber('${item._id}')">Delete</button>
                        <button onclick="editTask('${item._id}', '${item.taskTitle}', '${item.taskDescription}')">Edit</button>
                    </div>
                `;
            });
            html += '</div>';
            return html;
        }

        window.onload = function () {
            fetchData()
        }

        async function deleteSubscriber(id) {
            try {
                const response = await fetch(`http://localhost:3000/api/todos/${id}`, {
                    method: "DELETE"
                });
                if (!response.ok) {
                    throw new Error("Failed to delete Tasküò¢");
                }
                alert("Task deleted successfullyüëç");
                fetchData();
            } catch (error) {
                // console.error("Error:", error.message);
            }
        }

        async function editTask(id, currentTitle, currentDescription) {
            const newTitle = prompt("Enter new task title:", currentTitle);
            if (!newTitle) return;

            const newDescription = prompt("Enter new task description:", currentDescription);
            if (!newDescription) return;

            try {
                const response = await fetch(`http://localhost:3000/api/todos/${id}`, {
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        taskTitle: newTitle,
                        taskDescription: newDescription
                    })
                });
                if (!response.ok) {
                    const errorMessage = await response.text();
                    throw new Error(`Failed to update task: ${errorMessage}`);
                }
                alert("Task updated successfully");
                fetchData();
            } catch (error) {
                alert(`An error occurred: ${error.message}`);
            }
        }
    </script>
</body>

</html>


</body>

</html>